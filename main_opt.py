import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
from datetime import datetime as dt
import os
import numpy as np
import matplotlib.gridspec as gridspec

df = pd.read_csv('ASHRAE90.1_OfficeSmall_STD2016_NewYork.csv')
df=df.iloc[288:,:]
Date = df['Date/Time'].str.split(' ', expand=True)
Date.rename(columns={0:'nullo',1:'date',2:'null', 3:'time'},inplace=True)
Date['time'] = Date['time'].replace(to_replace='24:00:00', value= '0:00:00')
data = Date['date']+' '+Date['time']
data = pd.to_datetime(data, format = '%m/%d %H:%M:%S')

df['day']=data.apply(lambda x: x.day)
df['month']= data.apply(lambda x: x.month)
df['hour']=data.apply(lambda x: x.hour)
df['dn']=data.apply(lambda x: x.weekday())
df['data']=Date.date
# Opzione_1: convertire l'anno in secondi

def mean_plus_std(x):
    return x.mean()+x.std()
def mean_minus_std(x):
    return x.mean()-x.std()

def fill_dataset(df, value):
    if value == 'hour':
        new_df = df.groupby(df.hour)[df.columns[1:-5]].agg(['mean', 'std', 'max', 'min', 'median', mean_plus_std, mean_minus_std])
    elif value == 'day':
        new_df = df.groupby(df.dn)[df.columns[1:-5]].agg(['mean', 'std', 'max', 'min', 'median', mean_plus_std, mean_minus_std])
    elif value == 'month':
        new_df = df.groupby(df.month)[df.columns[1:-5]].agg(['mean', 'std', 'max', 'min', 'median', mean_plus_std, mean_minus_std])

    return new_df

df_hourly = fill_dataset(df,'hour')
df_daily = fill_dataset(df,'day')
df_monthly = fill_dataset(df,'month')



#TODO Exercise 1

# matplotlib.rcParams['figure.facecolor'] = '#00000000'
#TODO 1.Grafico Outdoor e indoor temperature con legenda e titolo
matplotlib.rcParams['font.size']=14
df.plot(x='data', y=['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)', 'CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'], lw=0.5)
plt.ylabel('Temperature [°C]')
plt.legend(['Outdoor Air Drybulb Temperature', 'Zone Mean Air Temperature'], loc = 'lower right')
plt.title('Outdoor and Indoor Temperature')
plt.show()


#TODO 2.Grafico relative humidity, cambia il fontsize di tutto (tick, label, titolo, legenda)
matplotlib.rcParams['font.size']=12
sns.set_style("whitegrid")
df.plot(x='data', y=['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)', 'CORE_ZN:Zone Air Relative Humidity [%](TimeStep)'], lw=0.5)
plt.ylabel('Humidity [%]')
plt.legend(['Outdoor Air Humidity', 'Zone Air Humidity'], loc = 'lower right')
plt.title('Outdoor and Indoor Relative Humidity')
plt.show()


#TODO 3.Grafico mean radiant temperature
matplotlib.rcParams['font.size']=10
sns.set_style("darkgrid")
# plt.style.use(['dark_background'])
df.plot(x='data', y=['CORE_ZN:Zone Mean Radiant Temperature [C](TimeStep)'], lw=0.5)
plt.ylabel('Temperature [°C]')
plt.legend('', frameon=False)
plt.title('Mean Radiant Temperature')
plt.show()

#TODO 4.Grafico thermal comfort PPD/PMV fai un subplot mettendo le immagini una sotto l’altra
fig, axes = plt.subplots(2, figsize=(14,10))
fig.suptitle('Zone PMV and PPD')
fig.subplots_adjust(hspace=0.5)
# plt.tight_layout(pad=2)
df.plot(ax=axes[0], x='data', y='CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)', label='PMV')
axes[0].legend(loc='upper right')
axes[0].set_title('PMV')
df.plot(ax=axes[1], x='data', y='CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)', label='PPD', c ='r')
axes[1].legend(loc='upper right')
axes[1].set_title('PPD [%]')
plt.show()

#TODO 5.Grafico cooling coil, inserisci dei rettangoli blu se sei nella cooling season
# (cioè quando il cooling coil è elevato) e rosso nella heating season. I rettangoli devono
# essere semitrasparenti.

df.plot(x='data', y=['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)', 'PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'])
plt.legend(['Cooling coil cooling rate [W]', 'Heating coil heating rate [W]'])
plt.title('Heat pump Heating and Cooling coil rate')
plt.show()

# Prova 1
# lab = ['01/01', '02/01', '03/01', '04/01', '05/01', '06/01', '07/01', '08/01', '09/01', '10/01', '11/01', '12/01']
plt.bar(df['data'], df['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'], color='blue', label='Coil Heating Rate [W]')
# df.plot(x='data', y=['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)', 'PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'])
plt.bar(df['data'], df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'], color='yellow', label='Total Cooling Rate [W]')
plt.fill_between(df['data'], 0, df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'].max(), where=(df['data']>'04/01')&(df['data']<'11/01'), facecolor='red', alpha=0.5)
plt.fill_between(df['data'], 0, df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'].max(), where=(df['data']>'01/01')&(df['data']<'03/31'), facecolor='blue', alpha=0.5)
plt.fill_between(df['data'], 0, df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'].max(), where=(df['data']>'11/02')&(df['data']<'12/31'), facecolor='blue', alpha=0.5)
plt.legend()
plt.xlabel('Date')
plt.xticks(df['data'][::30])
plt.xticklabels(df['data'][::30], rotation=45)
# plt.xticks(df['data'])
plt.title('Heat pump Heating and Cooling coil rate')
plt.show()

# Prova 2: con ax.
fig, ax = plt.subplots()
ax.bar(df['data'], df['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'], color='blue', label='Coil Heating Rate [W]')
# df.plot(x='data', y=['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)', 'PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'])
ax.bar(df['data'], df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'], color='yellow', label='Total Cooling Rate [W]')
ax.fill_between(df['data'], 0, df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'].max(), where=(df['data']>'04/01')&(df['data']<'11/01'), facecolor='red', alpha=0.5)
ax.fill_between(df['data'], 0, df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'].max(), where=(df['data']>'01/01')&(df['data']<'03/31'), facecolor='blue', alpha=0.5)
ax.fill_between(df['data'], 0, df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'].max(), where=(df['data']>'11/02')&(df['data']<'12/31'), facecolor='blue', alpha=0.5)
ax.legend()
ax.set_xlabel('Date')
ax.set_ylabel('W')
# ax.set_xticks(df['data'][::30])
# ax.set_xticklabels(df['data'][::30], rotation=45)
# plt.xticks(df['data'])
ax.set_title('Heat pump Heating and Cooling coil rate')
plt.show()

"""
# Prova 3
x = np.arange(len(df))
x = range(0,52560)
fig, ax = plt.subplots(1,1)
ax.set_title('Heat pump Heating and Cooling coil rate')
ax.bar(range(0,52560), df['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'], color='b', label='Cooling')
# ax.bar(range(0, 52561), df['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'])
plt.fill_between(x, y, 0, where=y>1500, color='r')
# plt.axvspan('01/01', '01/04', 0, 2500, facecolor='#2ca02c')
ax.legend()
plt.show()
"""

#TODO 6.Grafico People occupant count
df.plot(x='data', y = 'CORE_ZN:Zone People Occupant Count [](TimeStep)', lw=0.3, figsize=(30,8))
plt.suptitle('Zone People Occupant Count')
plt.legend('', frameon=False)
plt.show()


#TODO 7.Grafico diffuse solar radiation/direct solar radiation:
# fai subplot verticali con legenda per ognuno e leggenda globale

fig, axes =plt.subplots(1,2, figsize=(10,8))
fig.subplots_adjust(hspace=0.3)
fig.suptitle('Diffuse and direct solar radiation rate per area [W/m2]')
p1 = df.plot(ax=axes[0], x='data', y='Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)', lw=0.5, label='Diffuse solar radiation')
#axes[0].legend(['Diffuse'])
p2 = df.plot(ax=axes[1], x='data', y='Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)', c='r', lw=0.5, label='Direct solar radiation')
#axes[1].legend(['Direct'])
fig.legend([p1, p2], labels=['Diffuse', 'Direct'], ncol=2, loc='lower center')
plt.show()
"""
# fig = plt.subplots(2, figsize=(6,8))
# fig.subplots_adjust(hspace=0.3)
plt.subplot(1,2,1)
plt.suptitle('Diffuse and direct solar radiation rate per area [W/m2]')
plt.plot(df['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)'], c='b', lw=0.5, label='Diffuse solar radiation')
plt.legend(loc='lower center')
plt.subplot(1,2,2)
plt.plot(df['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)'], c='r', lw=0.5, label='Direct solar radiation')
plt.legend(loc='lower center')
plt.legend(labels=['Diffuse', 'Direct'], loc='lower center')
#fig.legend([p1, p2], labels=['Diffuse', 'Direct'], ncol=2, loc='upper right')
#plt.legend( handles=[p1,p2], loc='center right', ncol=2, shadow=True, title='Legend', fancybox='True')
plt.show()

fig, (ax1, ax2) = plt.subplots(1,2, figsize=(10,10))
plt.suptitle('Diffuse and direct solar radiation rate per area [W/m2]')
l1= ax1.plot(df['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)'], c='b', lw=0.5, label='Diffuse')
ax1.legend(loc='lower center')
l2=ax2.plot(df['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)'], c='r', lw=0.5, label='Direct')
ax2.legend(loc='lower center')
# fig.legend(handles=[ax1, ax2], labels=['Diffuse','Direct'], loc="upper left", ncol=2)
# plt.legend([ax1, ax2], labels=['Diffuse', 'Direct'], ncol=2, loc='upper center')
# plt.legend(handles=[ax1, ax2], loc="upper left", ncol=2)
plt.show()
"""

#TODO Exercise 2:usando il pacchetto pandas estrarre statistiche base dalle colonne del dataset
# (media,mediana, massimo, minimo, deviazione standard).Ripetere questo passaggio per 4 aggregazioni:
# 1.	Tutto l’anno
# 2.	per mese
# 3.	per giorno della settimana
# 4.	per ora del giorno

# Hourly
# Outdoor and indoor temperature
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(0,24), df_hourly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_hourly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax1.fill_between(range(0,24), df_hourly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean_plus_std'], df_hourly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Outdoor Air Drybulb Temperature [C]', fontsize=23)
ax1.legend(loc='lower center', ncol=4)
# plt.subplot(3,1,2)
ax2.bar(range(0,24), df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax2.fill_between(range(0,24), df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_plus_std'], df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Zone Mean Air Temperature [C]', fontsize=23)
ax2.legend(loc='lower center', ncol=4)
# plt.subplot(3,1,3)
ax3.bar(range(0,24), df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax3.fill_between(range(0,24), df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_plus_std'], df_hourly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Zone Mean Air Temperature [C]', fontsize=23)
ax3.legend(loc='lower center', ncol=4)
ax3.set_xlabel('Hour', fontsize=18)
#plt.tight_layout()
plt.show()

# Humidity
plt.subplot(2,1,1)
plt.bar(range(0,24), df_hourly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_hourly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0,24), df_hourly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean_plus_std'], df_hourly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Outdoor Air Relative Humidity [%]')
plt.legend(loc='lower center', ncol=4)
plt.subplot(2,1,2)
plt.bar(range(0,24), df_hourly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_hourly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0,24), df_hourly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean_plus_std'], df_hourly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Zone Air Relative Humidity [%]')
plt.legend(loc='lower center', ncol=4)
plt.xlabel('Hour')
plt.tight_layout()
plt.show()

# Diffuse and direct solar radiation rate
plt.subplot(2,1,1)
plt.bar(range(0,24), df_hourly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_hourly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0,24), df_hourly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_plus_std'], df_hourly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Diffuse Solar Radiation Rate per Area [W/m2]')
plt.legend(loc='upper right')
plt.subplot(2,1,2)
plt.bar(range(0,24), df_hourly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_hourly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0,24), df_hourly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_plus_std'], df_hourly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Direct Solar Radiation Rate per Area [W/m2]')
plt.legend(loc='upper right')
plt.xlabel('Hour')
plt.tight_layout()
plt.show()

# PMV e PPD
plt.subplot(2,1,1)
plt.bar(range(0,24), df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0,24), df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean_plus_std'], df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('PMV')
plt.legend(loc='upper right')
plt.subplot(2,1,2)
plt.bar(range(0,24), df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0,24), df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean_plus_std'], df_hourly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('PPD')
plt.legend(loc='upper right')
plt.xlabel('Hour')
plt.tight_layout()
plt.show()

# Heating and cooling rate (without max value) -> better visualization
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'][['min']], c='r', label=['Min'])
ax1.fill_between(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_plus_std'], df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Coil Total Cooling Rate [W]', fontsize=23)
ax1.legend(loc='upper right')
# plt.subplot(3,1,2)
ax2.bar(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'][['min']], c='r', label=['Min'])
ax2.fill_between(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_plus_std'], df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax2.legend(loc='upper right')
# plt.subplot(3,1,3)
# plt.show()
ax3.bar(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) '][['min']], c='r', label=['Min'])
ax3.fill_between(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_plus_std'], df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax3.legend(loc='upper right')
ax3.set_xlabel('Hour', fontsize=18)
#plt.tight_layout()
plt.show()

# Heating and cooling rate (with max value)
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax1.fill_between(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_plus_std'], df_hourly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Coil Total Cooling Rate [W]', fontsize=23)
ax1.legend(loc='upper right')
# plt.subplot(3,1,2)
ax2.bar(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax2.fill_between(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_plus_std'], df_hourly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax2.legend(loc='upper right')
# plt.subplot(3,1,3)
# plt.show()
ax3.bar(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) '][['max', 'min']], c='r', label=['Max', 'Min'])
ax3.fill_between(range(0,24), df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_plus_std'], df_hourly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax3.legend(loc='upper right')
ax3.set_xlabel('Hour', fontsize=18)
#plt.tight_layout()
plt.show()


# Monthly
# Outdoor and indoor temperature
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(1, 13), df_monthly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_monthly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax1.fill_between(range(1, 13), df_monthly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean_plus_std'], df_monthly['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Outdoor Air Drybulb Temperature [C]', fontsize=23)
ax1.legend(loc='lower center', ncol=4)
# plt.subplot(3,1,2)
ax2.bar(range(1, 13), df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax2.fill_between(range(1, 13), df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_plus_std'], df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Zone Mean Air Temperature [C]', fontsize=23)
ax2.legend(loc='lower center', ncol=4)
# plt.subplot(3,1,3)
ax3.bar(range(1, 13), df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax3.fill_between(range(1, 13), df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_plus_std'], df_monthly['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Zone Mean Air Temperature [C]', fontsize=23)
ax3.legend(loc='lower center', ncol=4)
ax3.set_xlabel('Month', fontsize=18)
#plt.tight_layout()
plt.show()

# Humidity
plt.subplot(2,1,1)
plt.bar(range(1,13), df_monthly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_monthly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(1,13), df_monthly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean_plus_std'], df_monthly['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Outdoor Air Relative Humidity [%]')
plt.legend(loc='lower center', ncol=4)
plt.subplot(2,1,2)
plt.bar(range(1,13), df_monthly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_monthly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(1,13), df_monthly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean_plus_std'], df_monthly['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Zone Air Relative Humidity [%]')
plt.legend(loc='lower center', ncol=4)
plt.xlabel('Month')
plt.tight_layout()
plt.show()

# Diffuse and direct solar radiation rate
plt.subplot(2,1,1)
plt.bar(range(1,13), df_monthly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_monthly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(1,13), df_monthly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_plus_std'], df_monthly['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Diffuse Solar Radiation Rate per Area [W/m2]')
plt.legend(loc='upper right')
plt.subplot(2,1,2)
plt.bar(range(1,13), df_monthly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_monthly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(1,13), df_monthly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_plus_std'], df_monthly['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Direct Solar Radiation Rate per Area [W/m2]')
plt.legend(loc='upper right')
plt.xlabel('Month')
plt.tight_layout()
plt.show()

# PMV e PPD
plt.subplot(2,1,1)
plt.bar(range(1,13), df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(1,13), df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean_plus_std'], df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('PMV')
plt.legend(loc='upper right')
plt.subplot(2,1,2)
plt.bar(range(1,13), df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(1,13), df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean_plus_std'], df_monthly['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('PPD')
plt.legend(loc='upper right')
plt.xlabel('Month')
plt.tight_layout()
plt.show()

# Heating and cooling rate (without max value) -> better visualization
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'][['min']], c='r', label=['Min'])
ax1.fill_between(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_plus_std'], df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Coil Total Cooling Rate [W]', fontsize=23)
ax1.legend(loc='upper right')
# plt.subplot(3,1,2)
ax2.bar(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'][['min']], c='r', label=['Min'])
ax2.fill_between(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_plus_std'], df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax2.legend(loc='upper right')
# plt.subplot(3,1,3)
# plt.show()
ax3.bar(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) '][['min']], c='r', label=['Min'])
ax3.fill_between(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_plus_std'], df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax3.legend(loc='upper right')
ax3.set_xlabel('Month', fontsize=18)
#plt.tight_layout()
plt.show()

# Heating and cooling rate (with max value)
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax1.fill_between(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_plus_std'], df_monthly['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Coil Total Cooling Rate [W]', fontsize=23)
ax1.legend(loc='upper right')
# plt.subplot(3,1,2)
ax2.bar(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax2.fill_between(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_plus_std'], df_monthly['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax2.legend(loc='upper right')
# plt.subplot(3,1,3)
# plt.show()
ax3.bar(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) '][['max', 'min']], c='r', label=['Max', 'Min'])
ax3.fill_between(range(1,13), df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_plus_std'], df_monthly['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax3.legend(loc='upper right')
ax3.set_xlabel('Month', fontsize=18)
#plt.tight_layout()
plt.show()


# Daily
# Outdoor and indoor temperature
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(0, 7), df_daily['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_daily['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax1.fill_between(range(0, 7), df_daily['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean_plus_std'], df_daily['Environment:Site Outdoor Air Drybulb Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Outdoor Air Drybulb Temperature [C]', fontsize=23)
ax1.legend(loc='lower center', ncol=4)
# plt.subplot(3,1,2)
ax2.bar(range(0, 7), df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax2.fill_between(range(0, 7), df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_plus_std'], df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Zone Mean Air Temperature [C]', fontsize=23)
ax2.legend(loc='lower center', ncol=4)
# plt.subplot(3,1,3)
ax3.bar(range(0, 7), df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax3.fill_between(range(0, 7), df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_plus_std'], df_daily['CORE_ZN:Zone Mean Air Temperature [C](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Zone Mean Air Temperature [C]', fontsize=23)
ax3.legend(loc='lower center', ncol=4)
ax3.set_xlabel('Day of week', fontsize=18)
#plt.tight_layout()
plt.show()

# Humidity
plt.subplot(2,1,1)
plt.bar(range(0, 7), df_daily['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_daily['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0, 7), df_daily['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean_plus_std'], df_daily['Environment:Site Outdoor Air Relative Humidity [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Outdoor Air Relative Humidity [%]')
plt.legend(loc='lower center', ncol=4)
plt.subplot(2,1,2)
plt.bar(range(0, 7), df_daily['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_daily['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0, 7), df_daily['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean_plus_std'], df_daily['CORE_ZN:Zone Air Relative Humidity [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Zone Air Relative Humidity [%]')
plt.legend(loc='lower center', ncol=4)
plt.xlabel('Day of week')
plt.tight_layout()
plt.show()

# Diffuse and direct solar radiation rate
plt.subplot(2,1,1)
plt.bar(range(0, 7), df_daily['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_daily['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0, 7), df_daily['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_plus_std'], df_daily['Environment:Site Diffuse Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Diffuse Solar Radiation Rate per Area [W/m2]')
plt.legend(loc='upper right')
plt.subplot(2,1,2)
plt.bar(range(0, 7), df_daily['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_daily['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0, 7), df_daily['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_plus_std'], df_daily['Environment:Site Direct Solar Radiation Rate per Area [W/m2](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('Direct Solar Radiation Rate per Area [W/m2]')
plt.legend(loc='upper right')
plt.xlabel('Day of week')
plt.tight_layout()
plt.show()

# PMV e PPD
plt.subplot(2,1,1)
plt.bar(range(0, 7), df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0, 7), df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean_plus_std'], df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PMV [](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('PMV')
plt.legend(loc='upper right')
plt.subplot(2,1,2)
plt.bar(range(0, 7), df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
plt.plot(df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
plt.fill_between(range(0, 7), df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean_plus_std'], df_daily['CORE_ZN:Zone Thermal Comfort Fanger Model PPD [%](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
plt.title('PPD')
plt.legend(loc='upper right')
plt.xlabel('Day of week')
plt.tight_layout()
plt.show()

# Heating and cooling rate (without max value) -> better visualization
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'][['min']], c='r', label=['Min'])
ax1.fill_between(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_plus_std'], df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Coil Total Cooling Rate [W]', fontsize=23)
ax1.legend(loc='upper right')
# plt.subplot(3,1,2)
ax2.bar(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'][['min']], c='r', label=['Min'])
ax2.fill_between(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_plus_std'], df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax2.legend(loc='upper right')
# plt.subplot(3,1,3)
# plt.show()
ax3.bar(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) '][['min']], c='r', label=['Min'])
ax3.fill_between(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_plus_std'], df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax3.legend(loc='upper right')
ax3.set_xlabel('Day of week', fontsize=18)
#plt.tight_layout()
plt.show()

# Heating and cooling rate (with max value)
fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(15,15))
# plt.subplot(3,1,1)
ax1.bar(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax1.plot(df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax1.fill_between(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_plus_std'], df_daily['PSZ-AC:1 HEAT PUMP DX COOLING COIL:Cooling Coil Total Cooling Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax1.set_title('Coil Total Cooling Rate [W]', fontsize=23)
ax1.legend(loc='upper right')
# plt.subplot(3,1,2)
ax2.bar(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean'], color='b', alpha=0.8, label='Mean')
ax2.plot(df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)'][['max', 'min']], c='r', label=['Max', 'Min'])
ax2.fill_between(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_plus_std'], df_daily['PSZ-AC:1 HEAT PUMP DX HEATING COIL:Heating Coil Heating Rate [W](TimeStep)']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax2.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax2.legend(loc='upper right')
# plt.subplot(3,1,3)
# plt.show()
ax3.bar(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean'], color='b', alpha=0.8, label='Mean')
ax3.plot(df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) '][['max', 'min']], c='r', label=['Max', 'Min'])
ax3.fill_between(range(0, 7), df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_plus_std'], df_daily['PSZ-AC:1 HEAT PUMP DX SUPP HEATING COIL:Heating Coil Heating Rate [W](TimeStep) ']['mean_minus_std'], color='g', alpha=0.8, label='Std')
ax3.set_title('Heating Coil Heating Rate [W]', fontsize=23)
ax3.legend(loc='upper right')
ax3.set_xlabel('Day of week', fontsize=18)
#plt.tight_layout()
plt.show()

